searchState.loadedDescShard("rust_algorithm_club", 0, "Colletions are general-purpose or specialized data …\nCalculate Hamming distance to two unsigned intergers.\nCalculate Hamming distance of two UTF-8 encoded strings.\nCalculate Levenshtein distance for two UTF-8 encoded …\nNaïvely calculate Levenshtein distance using the whole …\nSearching algorithms.\nSorting algorithms.\nA space efficient probablistic data structures offering an …\nA double-ended queue (abbreviated to <em>deque</em>), for which …\nA hash map implemented with separate chaining collision …\nA hash set implementation based on <code>HashMap</code>.\nA queue-like data structure implement through <code>std::vec::Vec</code>…\nA singly-linked list with owned nodes.\nA stack-like data structure implemented through a <code>Vec</code>.\nPeeks the last element of the container. If there are no …\nGets the number of underlying buckets.\nRemoves all elements from the container.\nRemoves all key-value pairs but keeps the allocated memory …\nReturns whether an element is present in the set.\nReturns whether an element is present in the container.\nRemoves the oldest added element in queue.\nReturns an iterator visiting items that exists in <code>self</code> but …\nAdds an element into queue.\nChecks the equality of sets.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPeeks the first element of the container. If there are no …\nGets a reference to the value under the specified key.\nGets a mutable reference to the value under the specified …\nInserts key-value pair into the map. Replaces previous …\nInserts an element into the set.\nInserts an element into the container.\nInserts an element after the specified position in the …\nReturns an iterator visiting items that exists in both <code>self</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator yielding elements in …\nReturns true if <code>self</code> has no elements in common with <code>other</code>.\nChecks whether the container is empty.\nChecks whether the container is empty.\nReturns whether there is no any element in the set.\nChecks whether the container is empty.\nReturns true if <code>other</code> contains at least all elements in …\nReturns true if <code>self</code> contains at least all elements in …\nCreates an iterator that yields immutable reference of …\nCreates an iterator that yields immutable reference of …\nCreates an iterator yielding immutable reference of each …\nCreates an iterator that yields immutable reference of …\nCreates an iterator that yields mutable reference of each …\nCreates an iterator that yields mutable reference of each …\nCreates an iterator that yields mutable reference of each …\nGets the number of elements in the container.\nGets the number of key-value pairs in the container.\nGets the number of non-repetitive elements, equivalently …\nGets the number of elements in the container.\nConstructs a new, empty <code>SinglyLinkedList&lt;T&gt;</code>.\nCreates an empty map with capacity 0.\nCreates an empty set.\nCreates an empty Bloom filter with desired capacity and …\nConstructs a new, empty <code>Deque&lt;T&gt;</code>.\nInitialize a queue with empty vector\nCompares sets to determine whether one is a subset of the …\nPeeks the last element added without tampering the …\nRetrieves the least recently added element without …\nRemoves the most recently added element that was not yet …\nRemoves and returns the last element of the container. If …\nRemoves and returns the first element of the container. If …\nRemoves and returns the first element of the container. If …\nAdds an element to the collection.\nAppends the given element value to the end of the …\nPrepends the given element value to the beginning of the …\nPrepends the given element value to the beginning of the …\nRemoves and returns an element at specified position from …\nRemoves a pair with specified key.\nRemoves an element from the set.\nReverses the order of the elements in the container.\nReturns\nRetrieves the size of the queue.\nReturns an iterator visiting items that only exists in …\nReturns an iterator visiting items that exists in <code>self</code>, in …\nCreates a map with a given capacity as the number of …\nInitialize a stack of certain capacity.\nHandmade binary search for a sorted sequence.\nExponential search. An binary search variant that can …\nSearch in sorted sequences by checking the next position …\nLinear search.\nMarcin Ciura’s gap sequence.\nBinary insertion sort.\nBubble sort\nOptimized bubble sort\nBucket sort\nCounting sort\nHeapsort.\nInsertion sort.\nIntrosort.\nMergesort.\nMergesort bottom-up version.\nPattern-defeating quicksort.\nQuicksort with Lomuto parition scheme.\nQuicksort with 3-way parition scheme.\nQuicksort with Hoare parition scheme\nManual tail-call opitimized quicksort with Lomuto parition …\nTail-call opitimized quicksort with Lomuto parition scheme.\nRadix sort for sorting unsigned integers.\nSelection sort.\nShellsort\nTimsort.")